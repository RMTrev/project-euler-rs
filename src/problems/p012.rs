use super::RunConfig;
use crate::common::sequence::TriangleNumber;

static LIMIT: u64 = 500;

/// Problem 12: Highly divisible triangular number
///
/// The sequence of triangle numbers is generated by adding the natural numbers. The first ten terms
/// are:
///
/// `1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...`
///
/// 28 is the first triangle number to have over 5 divisors:
///
/// `1, 2, 4, 7, 14, 28`
///
/// Find the first triangle number that has over 500 divisors.
pub fn run(config: RunConfig) {
    let mut limit: u64 = LIMIT;

    // if user supplied a limit in the params, override the one set statically
    if config.params.len() > 0 {
        limit = match config.params[0].parse() {
            Ok(v) => v,
            Err(e) => {
                eprintln!("Limit was specified, but was not an integer: {}", e);
                return;
            }
        };

        println!("Limit was specified: {}", limit);
    }

    // limit is immutable from here on
    let limit = limit;

    let tri_iter = TriangleNumber::new();

    for tn in tri_iter {
        let num_divisors = get_num_divisors(tn);
        if num_divisors > limit {
            println!("Answer: {}", tn);
            return;
        }
    }
}

fn get_num_divisors(n: u64) -> u64 {
    let mut num_divisors = 0;
    let mut cutoff = n;

    let mut i = 1;
    loop {
        if n % i == 0 {
            if n / i == i {
                num_divisors += 1;
            } else {
                num_divisors += 2;
            }

            cutoff = n / i;
        }

        i += 1;

        if i >= cutoff {
            break;
        }
    }

    num_divisors
}
